// <auto-generated />
using System;
using BunBlog.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BunBlog.Data.Migrations
{
    [DbContext(typeof(BunBlogContext))]
    [Migration("20190731173731_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BunBlog.Core.Domain.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("IX_Category_Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_Category_Name");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Posts.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Excerpt");

                    b.Property<string>("LinkName");

                    b.Property<DateTime>("PublishedOn");

                    b.Property<string>("Title");

                    b.Property<decimal>("Visits")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Posts.PostTag", b =>
                {
                    b.Property<int>("PostId");

                    b.Property<int>("TagId");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId")
                        .IsUnique();

                    b.HasIndex("PostId", "TagId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Tags.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("IX_Tag_Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_Tag_Name");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Posts.Post", b =>
                {
                    b.HasOne("BunBlog.Core.Domain.Categories.Category", "Category")
                        .WithOne()
                        .HasForeignKey("BunBlog.Core.Domain.Posts.Post", "CategoryId");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Posts.PostTag", b =>
                {
                    b.HasOne("BunBlog.Core.Domain.Posts.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BunBlog.Core.Domain.Tags.Tag", "Tag")
                        .WithOne()
                        .HasForeignKey("BunBlog.Core.Domain.Posts.PostTag", "TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
