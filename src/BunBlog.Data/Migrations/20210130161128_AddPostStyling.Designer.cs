// <auto-generated />
using System;
using BunBlog.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BunBlog.Data.Migrations
{
    [DbContext(typeof(BunBlogContext))]
    [Migration("20210130161128_AddPostStyling")]
    partial class AddPostStyling
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("BunBlog.Core.Domain.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasDatabaseName("IX_Category_DisplayName");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Category_Id");

                    b.HasIndex("LinkName")
                        .IsUnique()
                        .HasDatabaseName("IX_Category_LinkName");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Images.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Image_Id");

                    b.HasIndex("UploadTime")
                        .HasDatabaseName("IX_Image_UploadTime");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Posts.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Excerpt")
                        .HasColumnType("text");

                    b.Property<int?>("For")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModifyOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Styling")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Post_Id");

                    b.HasIndex("PublishedOn")
                        .HasDatabaseName("IX_Post_PublishedOn");

                    b.HasIndex("LinkName", "Type")
                        .IsUnique()
                        .HasDatabaseName("IX_Post_LinkName_Type");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Posts.PostMetadata", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("PostId", "Key");

                    b.HasIndex("PostId", "Key")
                        .HasDatabaseName("IX_PostMetadata_PostId_Key");

                    b.ToTable("PostMetadata");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Posts.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("PostId")
                        .HasDatabaseName("IX_PostTag_PostId");

                    b.HasIndex("TagId")
                        .HasDatabaseName("IX_PostTag_TagId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Settings.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Setting_Code");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Setting_Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.SiteLinks.SiteLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_SiteLink_Id");

                    b.ToTable("SiteLink");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Tags.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasDatabaseName("IX_Tag_DisplayName");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Tag_Id");

                    b.HasIndex("LinkName")
                        .IsUnique()
                        .HasDatabaseName("IX_Tag_LinkName");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Posts.Post", b =>
                {
                    b.HasOne("BunBlog.Core.Domain.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Posts.PostMetadata", b =>
                {
                    b.HasOne("BunBlog.Core.Domain.Posts.Post", null)
                        .WithMany("MetadataList")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Posts.PostTag", b =>
                {
                    b.HasOne("BunBlog.Core.Domain.Posts.Post", "Post")
                        .WithMany("TagList")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BunBlog.Core.Domain.Tags.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BunBlog.Core.Domain.Posts.Post", b =>
                {
                    b.Navigation("MetadataList");

                    b.Navigation("TagList");
                });
#pragma warning restore 612, 618
        }
    }
}
